#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>

#include "string.h"
#include "config.h"
#include "siparse.h"
#include "utils.h"
#include "builtins.h"

#define true 1
#define false 0
#define bool int


#define ChildStatusBuffer 100

#define DEBUG

// handler dla sigchild, trzeba ogarnac ktory z background
// info o backgourndzie przed tuz przed promptem
// zdefiniowac sobie stala buffor dla trzymania informacji o procesach z backgrounda

typedef struct exitStatus{
	pid_t pid;
	int exitTerminatedFlag;
	int terminationCode;
} exitStatus
exitStatus BGexitStatus[ChildStatusBuffer]; //TODO
int BGexitStatusIndex = 0;
void addBGexitStatus(exitStatus); //TODO
exitStatus removeBGexitStatus(); // return null if empty






typedef struct redirDetails{
	char *in;
	char *out;
	int inFlag;
	int outFlag;
} redirDetails;
void redirDetailsInit(redirDetails* data);


char linebuf[MAX_LINE_LENGTH + 1];
char buffer[2 * MAX_LINE_LENGTH + 2]; // bufor dla read
char* bufferPtr = buffer;

void runCommand(command _command);
int findEndOfLine(char* tab, int pos, int size); // looking for '\n' char in tab[size] begining from pos
int sinkRead(void);
void say(char* text);
int checkIfLastChar(char* line, char character);
int checkIfBgLine(line _line);
int runLine(line _line);
redirDetails getRedirDetails(command _command);

void registerHandlers(void);

int (*(findFunction)(char*))(char **);


// and returning -1 if not found, or x>=pos if found

int
main(int argc, char *argv[])
{
	line * ln;
	command *com;

	int printPrompt = 1;
	struct stat statbuffer;

	int continue_flag = 1; // warning: set but not reset
	char* bufferptr = buffer;
	char* lineBegin;
	char* lineEnd;

	int status = fstat(STDIN_FILENO, &statbuffer);
	if (status != 0)
	{// some errors

	}
	else
	{
		if (!S_ISCHR(statbuffer.st_mode))
			printPrompt = 0;
	}
	while (continue_flag)
	{
		int bytesRead;
		if (printPrompt)
			write(STDOUT_FILENO, PROMPT_STR, sizeof(PROMPT_STR)); // 1. wypisz prompt na std

			int r = sinkRead();
			if (r == 0)
			{
				continue_flag = 0;
			}

			ln = parseline(linebuf);
			if (!ln) // 4.2 parsowanie zakonczone bledem
			{
				write(STDOUT_FILENO, SYNTAX_ERROR_STR, sizeof(SYNTAX_ERROR_STR)); // TODO, sprawdz czy stdout czy stderr
				continue;
			}

			pipeline _pipeline = *(ln->pipelines); // has to be modified to run all commands from line
			command _command = **_pipeline;
			
			runCommand(_command); // only one, first command

			int result = 0;
			waitpid(-1, &result, 0);
			result = WEXITSTATUS(result);

	}

}

void runCommand(command _command)
{
	if(findFunction(_command.argv[0]) != NULL)
	{
		int result = (findFunction(_command.argv[0]))(_command.argv); // -1 on error
		if(result == -1)
		{
			char text[MAX_LINE_LENGTH];
			strcpy(text, "Builtin ");
			strcat(text, _command.argv[0]);
			strcat(text, " error.\n");
			write(STDOUT_FILENO, text, strlen(text));
		}

	} else
	{
		int waitForProcess = !checkIfBgCommand(_command);
		int childpid = fork();
		if (childpid == 0)
		{ // if kid
			if(_command.redirs != NULL)
			{
				redirDetails details = getRedirDetails(_command);
				if(details.inFlag == 1) // look at freopen()
				{
					freopen(details.in, "r", stdin); // a co jak pliku nie ma?
					//close(STDIN_FILENO);
					//int fd = open(details.in, O_RDONLY);
					//int dupresult = dup2(fd ,STDIN_FILENO);
				}
				if(details.outFlag == 2)
				{
					say("append");
					freopen(details.out, "a+", stdout);
				}
				if(details.outFlag == 1)
				{
					say("write");
					freopen(details.out, "w", stdout);
				}
			}	
	


			errno = 0;
			execvp(*_command.argv, _command.argv);
			char buffer[MAX_LINE_LENGTH + 33];
			buffer[0] = 0;
			strcat(buffer, *_command.argv);
			if (errno == ENOENT)
			{
				strcat(buffer, ": no such file or directory\n");
			}
			else if (errno == EACCES)
			{
				strcat(buffer, ": permission denied\n");
			}
			else
			{
				strcat(buffer, ": exec error\n");
			}
			write(STDERR_FILENO, buffer, strlen(buffer));
	
			exit(EXEC_FAILURE);
		}
	}
}

int findEndOfLine(char* tab, int pos, int size) // looking for '\n' char in tab[size] begining from pos
{	// and returning -1 if not found, or x>=pos if found
	int p = pos;
	while (p < size)
	{
		if (tab[p] == '\n')
			return p;
		p++;
	}
	return -1;
}


// returns 0 if EOF, else 1
int sinkRead()
{
	char tmp[MAX_LINE_LENGTH];
	int bytesRead;
	char* tmpPointer = tmp; // wskazuje pierwsza wolna
	int tmpused = 0;
	while (1)
	{
		errno = 0;
		bytesRead = read(STDIN_FILENO, tmpPointer, MAX_LINE_LENGTH - tmpused); // jezeli bytesread
		if (bytesRead == -1)
		{
			if (errno == EAGAIN)
			{
				say("EAGAIN\n");
				continue;
			}
			return 0;
		}
		if (bytesRead == 0)
		{
			*tmpPointer = '\0';
			memcpy(linebuf, buffer, bufferPtr - buffer);
			memcpy(linebuf + (bufferPtr - buffer), tmp, tmpPointer-tmp); // a co jesli poprzedni odczyt byl niepelny?
			bufferPtr = buffer;
			return 0;
		}
		tmpused += bytesRead;
		tmpPointer += bytesRead;
		int r = findEndOfLine(tmp, 0, tmpused);

		if (r == -1)
			continue;
		memcpy(linebuf, buffer, bufferPtr - buffer);
		memcpy(linebuf + (bufferPtr - buffer), tmp, r+1); // tak samo, a co jesli poprzedni odczyt byl niepelny
		//linebuf[(bufferPtr - buffer) + r + 1] = '\0'; // was
		linebuf[(bufferPtr - buffer) + r] = '\0';
		memcpy(buffer, tmp + r + 1, tmpPointer - tmp - r - 1);

		/*write(STDOUT_FILENO, "line:", 5); // 1. wypisz prompt na std
		write(STDOUT_FILENO, linebuf, MAX_LINE_LENGTH); // 1. wypisz prompt na std
		write(STDOUT_FILENO, "\nbuff: ", 7); // 1. wypisz prompt na std
		write(STDOUT_FILENO, buffer, MAX_LINE_LENGTH); // 1. wypisz prompt na std
		write(STDOUT_FILENO, "\n ", 2); // 1. wypisz prompt na std*/
		
		bufferPtr = buffer + (tmpPointer - tmp) - r - 1;
		return 1;
		break;
	}
	return 0;
}

void say(char* text)
{
#ifdef DEBUG
	write(STDOUT_FILENO, text, strlen(text)); // 1. wypisz prompt na std
#endif
}

int (*(findFunction)(char* name))(char **) // returns special function that should be executed on main process, or NULL pointer if there is no such function
{
	if(name == NULL || name[0] == '\0')
		return NULL;

	builtin_pair* pointer = builtins_table;
	while(pointer->name != NULL)
	{
		if(strcmp(pointer->name, name) == 0)
		{
			return pointer->fun;
		}

		pointer++;
	}
	return NULL;
}

redirDetails getRedirDetails(command _command) // need function to check whether only 1 in and only 1 out
{
	redirDetails result;
	redirDetailsInit(&result);
	//redirection* pointer = _command.redirs; // tutaj blad, po tym jak po tablicy
	//tutaj blad
	
	int i = 0;
	while(_command.redirs[i] != NULL)
	{
		if(IS_RIN(_command.redirs[i]->flags))
		{
			result.inFlag = 1;
			result.in = _command.redirs[i]->filename;
		}
		if(IS_ROUT(_command.redirs[i]->flags))
		{
			result.outFlag = 1;
			result.out = _command.redirs[i]->filename;
		}

		if(IS_RAPPEND(_command.redirs[i]->flags))
		{
			result.outFlag = 2;
			result.out = _command.redirs[i]->filename;
		}


		/*switch(_command.redirs[i]->flags)
		{
			case RAPPEND:
			say("out flag 2");
			result.outFlag = 2;
			result.out = _command.redirs[i]->filename;
			break;
			case ROUT:
			say("out flag 1");
			result.outFlag = 1;
			result.out = _command.redirs[i]->filename;
			break;
			case RIN:
			say("in flag 1");
			result.inFlag = 1;
			result.in = _command.redirs[i]->filename;
			break;
		}*/
		i++;
	}
	return result;
}

int checkIfBgLine(line _line);
{
	data->inFlag = 0;
	data->outFlag = 0;
	data->in = NULL;
	data->out = NULL;
}


int checkIfLastChar(char* line, char character)
{
	char* ptr = line;
	while(*(ptr+1)!= 0)
		ptr++;
	return *ptr == character;
}
int checkIfBgLine(line _line)
{
	return _line.flags == LINBACKGROUND;
/*
	
	if(_command.argv[0] == NULL)
	{	
		say("null odd");
		return 0;
	}
	
	int i = 0;
	while(_command.argv[i+1] != NULL)
	{
	i++;
	}
	return strcmp("&", _command.argv[i]);*/
}


void SIGCHLD_handler(int i)
{
	pid_t p = waitpid();
	//pid_t getpgid(pid_t pid); returns proccess group id 
	// it may not work, store background or foreground process id somewhere
}

void registerHandlers(void)
{
	sigaction s;
	s.sa_handler = SIGCHLD_handler; // functions
	s.sa_sigaction = NULL // function2, more precise but unnecessery, if flag = something
	s.sa_flags = SA_NOCLDSTOP;
	sigemptyset(s.sa_mask);
	
	sigaction(SIGCHLD, s ,NULL);

}

