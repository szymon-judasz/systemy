#include <stdio.h>

#include "config.h"
#include "siparse.h"
#include "utils.h"

int
main(int argc, char *argv[])
{
	/*line * ln;
	command *com;

	ln = parseline("ls -las | grep k | wc ; echo abc > f1 ;  cat < f2 ; echo abc >> f3\n");
	printparsedline(ln);
	printf("\n");
	com = pickfirstcommand(ln);
	printcommand(com,1);
	printf("just before second command\n");
	ln = parseline("sleep 3 &");
	printparsedline(ln);
	printf("\n");
	
	ln = parseline("echo  & abc >> f3\n");
	printparsedline(ln);
	printf("\n");
	com = pickfirstcommand(ln);
	printcommand(com,1);*/
	
	line *ln;
	command *com;

	int continue_flag = 1;
	char buffer[MAX_LINE_LENGTH + 1]; 
	while(continue_flag)
	{
		int bytesRead;
		printf(PROMPT_STR);
		bytesRead = read(0, buffer, MAX_LINE_LENGTH);
		//write(0, buffer, bytesRead);
		if(bytesRead == -1){
			// error handling
			return -1;
		}
		if(bytesRead == 0)
		{
			// EOF detected
			return 0;
		}

		buffer[bytesRead] = 0;
		ln = parseline(buffer);
		int c;
		pipeline * p;

		if (!ln){
			printf("%s\n",SYNTAX_ERROR_STR);
			return;
		}
		c=1;
		for (p=ln->pipelines;*p;p++, c++)
		{
			//printpipeline(*p,c);
		}
		
	}

}
